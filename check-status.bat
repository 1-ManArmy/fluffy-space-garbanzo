@echo off
echo ========================================
echo üìä OneLastAI Platform Status Monitor
echo ========================================

echo.
echo üê≥ Docker Containers Status:
echo ========================================
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo.
echo üåê Service Health Check:
echo ========================================

echo üì° Checking Rails Server (Port 3000)...
powershell -Command "try { $response = Invoke-WebRequest -Uri 'http://localhost:3000' -TimeoutSec 5 -UseBasicParsing; Write-Host '‚úÖ Rails Server: ONLINE' -ForegroundColor Green } catch { Write-Host '‚ùå Rails Server: OFFLINE' -ForegroundColor Red }"

echo.
echo üóÑÔ∏è Checking PostgreSQL (Port 5432)...
powershell -Command "try { $connection = New-Object System.Net.Sockets.TcpClient; $connection.Connect('localhost', 5432); $connection.Close(); Write-Host '‚úÖ PostgreSQL: ONLINE' -ForegroundColor Green } catch { Write-Host '‚ùå PostgreSQL: OFFLINE' -ForegroundColor Red }"

echo.
echo üì¶ Checking Redis (Port 6379)...
powershell -Command "try { $connection = New-Object System.Net.Sockets.TcpClient; $connection.Connect('localhost', 6379); $connection.Close(); Write-Host '‚úÖ Redis: ONLINE' -ForegroundColor Green } catch { Write-Host '‚ùå Redis: OFFLINE' -ForegroundColor Red }"

echo.
echo ü§ñ AI Models Status:
echo ========================================
echo ü¶ô Llama3.2 (Port 11434)...
powershell -Command "try { $connection = New-Object System.Net.Sockets.TcpClient; $connection.Connect('localhost', 11434); $connection.Close(); Write-Host '‚úÖ Llama3.2: READY' -ForegroundColor Green } catch { Write-Host '‚ùå Llama3.2: OFFLINE' -ForegroundColor Red }"

echo üíé Gemma2 (Port 11435)...
powershell -Command "try { $connection = New-Object System.Net.Sockets.TcpClient; $connection.Connect('localhost', 11435); $connection.Close(); Write-Host '‚úÖ Gemma2: READY' -ForegroundColor Green } catch { Write-Host '‚ùå Gemma2: OFFLINE' -ForegroundColor Red }"

echo üß† Phi-4 (Port 11436)...
powershell -Command "try { $connection = New-Object System.Net.Sockets.TcpClient; $connection.Connect('localhost', 11436); $connection.Close(); Write-Host '‚úÖ Phi-4: READY' -ForegroundColor Green } catch { Write-Host '‚ùå Phi-4: OFFLINE' -ForegroundColor Red }"

echo üîç DeepSeek (Port 11437)...
powershell -Command "try { $connection = New-Object System.Net.Sockets.TcpClient; $connection.Connect('localhost', 11437); $connection.Close(); Write-Host '‚úÖ DeepSeek: READY' -ForegroundColor Green } catch { Write-Host '‚ùå DeepSeek: OFFLINE' -ForegroundColor Red }"

echo üê≠ SmolLM2 (Port 11438)...
powershell -Command "try { $connection = New-Object System.Net.Sockets.TcpClient; $connection.Connect('localhost', 11438); $connection.Close(); Write-Host '‚úÖ SmolLM2: READY' -ForegroundColor Green } catch { Write-Host '‚ùå SmolLM2: OFFLINE' -ForegroundColor Red }"

echo üå™Ô∏è Mistral (Port 11439)...
powershell -Command "try { $connection = New-Object System.Net.Sockets.TcpClient; $connection.Connect('localhost', 11439); $connection.Close(); Write-Host '‚úÖ Mistral: READY' -ForegroundColor Green } catch { Write-Host '‚ùå Mistral: OFFLINE' -ForegroundColor Red }"

echo üêπ TinyLlama (Port 11440)...
powershell -Command "try { $connection = New-Object System.Net.Sockets.TcpClient; $connection.Connect('localhost', 11440); $connection.Close(); Write-Host '‚úÖ TinyLlama: READY' -ForegroundColor Green } catch { Write-Host '‚ùå TinyLlama: OFFLINE' -ForegroundColor Red }"

echo.
echo üåç Public Access Status:
echo ========================================
powershell -Command "try { $ngrok = Get-Process ngrok -ErrorAction Stop; Write-Host '‚úÖ Ngrok: RUNNING (Check ngrok terminal for public URL)' -ForegroundColor Green } catch { Write-Host '‚ùå Ngrok: NOT RUNNING' -ForegroundColor Red }"

echo.
echo üìà System Resources:
echo ========================================
powershell -Command "Get-WmiObject -Class Win32_Processor | Select-Object -ExpandProperty LoadPercentage | ForEach-Object { Write-Host 'CPU Usage: ' $_'%' }"
powershell -Command "$memory = Get-WmiObject -Class Win32_OperatingSystem; $usedMemory = [math]::Round(($memory.TotalVisibleMemorySize - $memory.FreePhysicalMemory) / $memory.TotalVisibleMemorySize * 100, 2); Write-Host 'Memory Usage: ' $usedMemory'%'"

echo.
echo ========================================
echo üìä Status Check Complete!
echo ========================================
pause
