<div class="neochat-dashboard">
  <!-- Hero Section -->
  <div class="hero-section">
    <div class="hero-content">
      <div class="agent-logo">💬</div>
      <h1 class="agent-title">NeoChat</h1>
      <p class="agent-tagline">Advanced Conversational AI Assistant</p>
      <p class="agent-description">
        Your intelligent conversation partner for any topic. I excel at natural language understanding, 
        creative writing, problem-solving, and engaging dialogue. Let's start an intelligent conversation!
      </p>
      
      <div class="agent-stats">
        <div class="stat-item">
          <span class="stat-value"><%= @agent_stats[:total_conversations] %></span>
          <span class="stat-label">Conversations</span>
        </div>
        <div class="stat-item">
          <span class="stat-value"><%= @agent_stats[:average_rating] %></span>
          <span class="stat-label">Rating</span>
        </div>
        <div class="stat-item">
          <span class="stat-value"><%= @agent_stats[:response_time] %></span>
          <span class="stat-label">Response Time</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Features Section -->
  <div class="features-section">
    <div class="container">
      <h2 class="section-title">🧠 AI Capabilities</h2>
      <div class="features-grid">
        <div class="feature-card">
          <div class="feature-icon">🗣️</div>
          <h3>Natural Conversation</h3>
          <p>Engage in fluid, natural conversations on any topic with advanced language understanding.</p>
          <button class="feature-btn" onclick="startConversation('natural')">Start Chatting</button>
        </div>
        
        <div class="feature-card">
          <div class="feature-icon">🎨</div>
          <h3>Creative Writing</h3>
          <p>Collaborate on creative projects, stories, poems, and innovative content creation.</p>
          <button class="feature-btn" onclick="startConversation('creative')">Get Creative</button>
        </div>
        
        <div class="feature-card">
          <div class="feature-icon">🔬</div>
          <h3>Problem Solving</h3>
          <p>Analyze complex problems and find solutions with logical reasoning and insight.</p>
          <button class="feature-btn" onclick="startConversation('problem')">Solve Problems</button>
        </div>
        
        <div class="feature-card">
          <div class="feature-icon">📚</div>
          <h3>Knowledge & Learning</h3>
          <p>Explore topics, learn new concepts, and gain insights across various domains.</p>
          <button class="feature-btn" onclick="startConversation('learning')">Learn Together</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Terminal Chat Interface -->
  <div class="terminal-section">
    <div class="container">
      <h2 class="section-title">💬 Chat Terminal</h2>
      <div class="terminal-container">
        <div class="terminal-header">
          <div class="terminal-controls">
            <div class="terminal-button close"></div>
            <div class="terminal-button minimize"></div>
            <div class="terminal-button maximize"></div>
          </div>
          <div class="terminal-title">neochat@onelastai.com</div>
          <div class="terminal-status">
            <span class="status-indicator online"></span>
            <span class="status-text">Online</span>
          </div>
        </div>
        
        <div class="terminal-output" id="terminalOutput">
          <div class="welcome-message">
╔══════════════════════════════════════════════════════════════════╗
║                       Welcome to NeoChat                        ║
║              Advanced Conversational AI Assistant               ║
╚══════════════════════════════════════════════════════════════════╝

<span class="system-info">System: NeoChat v<%= @agent.version %> | Status: Online | Session: <%= @agent.id[0,8] %>...
<%= Time.current.strftime("Date: %Y-%m-%d %H:%M:%S") %> | Agent Ready</span>

<span class="agent-intro">Hello! I'm NeoChat, your intelligent AI conversation partner.</span>

I can help you with:
• 💭 Natural conversations and discussions
• 🎯 Questions & answers on any topic  
• 🛠️ Problem solving and analysis
• 💡 Creative writing and brainstorming
• 📖 Learning and knowledge exploration
• 🤔 Deep thinking and insights

Type your message below to start our conversation!
          </div>
          
          <div class="typing-indicator" id="typingIndicator">
            <span class="typing-dots">NeoChat is thinking<span class="dots"></span></span>
          </div>
        </div>
        
        <div class="terminal-input-section">
          <div class="input-container">
            <span class="terminal-prompt">you@terminal:~$ </span>
            <input 
              type="text" 
              class="terminal-input" 
              id="messageInput"
              placeholder="Type your message here..."
              autocomplete="off"
            >
            <button class="send-button" id="sendButton">
              <span class="button-text">Send</span>
              <span class="button-icon">→</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Recent Conversations -->
  <% if @recent_conversations.present? %>
    <div class="recent-section">
      <div class="container">
        <h3 class="section-subtitle">📝 Recent Conversations</h3>
        <div class="recent-grid">
          <% @recent_conversations.each do |conversation| %>
            <div class="recent-card">
              <div class="recent-topic"><%= conversation[:topic] %></div>
              <div class="recent-time"><%= conversation[:timestamp] %></div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  <% end %>
</div>

<%= content_for :head do %>
<style>
  .neochat-dashboard {
    min-height: calc(100vh - 60px);
    background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
    color: #ffffff;
    position: relative;
  }

  .neochat-dashboard::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="%2300d4ff" stroke-width="0.3" opacity="0.2"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
    animation: gridMove 30s linear infinite;
    pointer-events: none;
  }

  @keyframes gridMove {
    0% { transform: translate(0, 0); }
    100% { transform: translate(10px, 10px); }
  }

  .hero-section {
    padding: 4rem 2rem;
    text-align: center;
    background: radial-gradient(ellipse at center, rgba(0, 212, 255, 0.1) 0%, transparent 70%);
    border-bottom: 2px solid #00d4ff;
    position: relative;
    z-index: 1;
  }

  .agent-logo {
    font-size: 4rem;
    margin-bottom: 1rem;
    text-shadow: 0 0 20px #00d4ff;
    animation: logoGlow 3s infinite;
  }

  @keyframes logoGlow {
    0%, 100% { 
      transform: scale(1);
      text-shadow: 0 0 20px #00d4ff;
    }
    50% { 
      transform: scale(1.05);
      text-shadow: 0 0 30px #00d4ff, 0 0 40px #0099cc;
    }
  }

  .agent-title {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, #00d4ff, #ffffff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-shadow: 0 0 10px #00d4ff;
  }

  .agent-tagline {
    font-size: 1.3rem;
    color: #b3b3b3;
    margin-bottom: 1.5rem;
    font-style: italic;
  }

  .agent-description {
    max-width: 600px;
    margin: 0 auto 2rem;
    color: #cccccc;
    line-height: 1.6;
    font-size: 1.1rem;
  }

  .agent-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-top: 2rem;
    flex-wrap: wrap;
  }

  .stat-item {
    background: rgba(0, 212, 255, 0.1);
    border: 1px solid #00d4ff;
    border-radius: 12px;
    padding: 1.5rem;
    min-width: 140px;
    text-align: center;
    transition: all 0.3s ease;
  }

  .stat-item:hover {
    background: rgba(0, 212, 255, 0.2);
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 212, 255, 0.3);
  }

  .stat-value {
    font-size: 2rem;
    font-weight: bold;
    color: #00d4ff;
    display: block;
    margin-bottom: 0.5rem;
  }

  .stat-label {
    font-size: 0.9rem;
    color: #b3b3b3;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .section-title {
    font-size: 2.5rem;
    text-align: center;
    margin-bottom: 3rem;
    color: #00d4ff;
    font-weight: 300;
  }

  .features-section {
    padding: 4rem 0;
    background: rgba(26, 26, 46, 0.5);
    position: relative;
    z-index: 1;
  }

  .features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
  }

  .feature-card {
    background: rgba(16, 33, 62, 0.8);
    border: 2px solid #333;
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .feature-card:hover {
    border-color: #00d4ff;
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0, 212, 255, 0.3);
  }

  .feature-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
  }

  .feature-card h3 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: #00d4ff;
  }

  .feature-card p {
    color: #cccccc;
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }

  .feature-btn {
    background: linear-gradient(45deg, #00d4ff, #0099cc);
    color: #000;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .feature-btn:hover {
    transform: scale(1.05);
    box-shadow: 0 5px 15px rgba(0, 212, 255, 0.4);
  }

  .terminal-section {
    padding: 4rem 0;
    position: relative;
    z-index: 1;
  }

  .terminal-container {
    background: #000000;
    border: 2px solid #00d4ff;
    border-radius: 12px;
    box-shadow: 0 0 30px rgba(0, 212, 255, 0.3);
    overflow: hidden;
    max-width: 1000px;
    margin: 0 auto;
  }

  .terminal-header {
    background: linear-gradient(90deg, #00d4ff 0%, #0099cc 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .terminal-button {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .terminal-button.close { background: #ff5f56; }
  .terminal-button.minimize { background: #ffbd2e; }
  .terminal-button.maximize { background: #27ca3f; }

  .terminal-title {
    color: #000;
    font-weight: bold;
    font-family: 'Consolas', 'Monaco', monospace;
  }

  .terminal-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #000;
    font-size: 0.9rem;
  }

  .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #27ca3f;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .terminal-output {
    height: 400px;
    padding: 1rem;
    overflow-y: auto;
    background: #000000;
    color: #00ff00;
    font-family: 'Consolas', 'Monaco', monospace;
    font-size: 14px;
    line-height: 1.4;
  }

  .terminal-output::-webkit-scrollbar {
    width: 8px;
  }

  .terminal-output::-webkit-scrollbar-track {
    background: #1a1a1a;
  }

  .terminal-output::-webkit-scrollbar-thumb {
    background: #00d4ff;
    border-radius: 4px;
  }

  .welcome-message {
    color: #00d4ff;
    margin-bottom: 1rem;
    white-space: pre-line;
  }

  .system-info {
    color: #666666;
    font-size: 12px;
    margin-bottom: 1rem;
  }

  .agent-intro {
    color: #ffffff;
    font-weight: bold;
  }

  .typing-indicator {
    color: #00ff00;
    display: none;
    margin: 1rem 0;
  }

  .typing-indicator.active {
    display: block;
  }

  .dots::after {
    content: '...';
    animation: typing 1.5s infinite;
  }

  @keyframes typing {
    0%, 60% { content: '...'; }
    20% { content: '.'; }
    40% { content: '..'; }
  }

  .terminal-input-section {
    background: #111111;
    border-top: 1px solid #333333;
    padding: 1rem;
  }

  .input-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .terminal-prompt {
    color: #00ff00;
    font-weight: bold;
    font-family: 'Consolas', 'Monaco', monospace;
    flex-shrink: 0;
  }

  .terminal-input {
    flex: 1;
    background: transparent;
    border: none;
    color: #00d4ff;
    font-family: 'Consolas', 'Monaco', monospace;
    font-size: 14px;
    outline: none;
    padding: 0.75rem;
  }

  .terminal-input::placeholder {
    color: #666666;
  }

  .send-button {
    background: linear-gradient(45deg, #00d4ff, #0099cc);
    border: none;
    border-radius: 8px;
    color: #000;
    padding: 0.75rem 1.5rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: 'Consolas', 'Monaco', monospace;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .send-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 212, 255, 0.4);
  }

  .send-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .recent-section {
    padding: 3rem 0;
    background: rgba(16, 33, 62, 0.3);
    position: relative;
    z-index: 1;
  }

  .section-subtitle {
    font-size: 1.8rem;
    text-align: center;
    margin-bottom: 2rem;
    color: #00d4ff;
  }

  .recent-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
  }

  .recent-card {
    background: rgba(0, 212, 255, 0.1);
    border: 1px solid #00d4ff;
    border-radius: 8px;
    padding: 1rem;
    transition: all 0.3s ease;
  }

  .recent-card:hover {
    background: rgba(0, 212, 255, 0.2);
    transform: translateY(-2px);
  }

  .recent-topic {
    color: #ffffff;
    font-weight: 500;
    margin-bottom: 0.5rem;
  }

  .recent-time {
    color: #b3b3b3;
    font-size: 0.9rem;
  }

  @media (max-width: 768px) {
    .hero-section {
      padding: 2rem 1rem;
    }
    
    .agent-title {
      font-size: 2rem;
    }
    
    .agent-stats {
      gap: 1rem;
    }
    
    .terminal-section {
      padding: 2rem 1rem;
    }
    
    .terminal-output {
      height: 300px;
    }
    
    .features-grid,
    .recent-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
<% end %>

<%= content_for :javascript do %>
<script>
  class NeoChatInterface {
    constructor() {
      this.output = document.getElementById('terminalOutput');
      this.input = document.getElementById('messageInput');
      this.sendButton = document.getElementById('sendButton');
      this.typingIndicator = document.getElementById('typingIndicator');
      
      this.setupEventListeners();
      this.focusInput();
    }
    
    setupEventListeners() {
      this.input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          this.sendMessage();
        }
      });
      
      this.sendButton.addEventListener('click', () => {
        this.sendMessage();
      });
      
      this.output.addEventListener('click', () => {
        this.input.focus();
      });
    }
    
    focusInput() {
      this.input.focus();
    }
    
    async sendMessage() {
      const message = this.input.value.trim();
      if (!message) return;
      
      this.addMessage('user', message);
      this.input.value = '';
      this.setLoading(true);
      
      try {
        const response = await fetch('/neochat/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
          },
          body: JSON.stringify({ message: message })
        });
        
        const data = await response.json();
        
        if (data.success) {
          this.addMessage('agent', data.response, data.timestamp);
        } else {
          this.addMessage('error', data.error || 'Sorry, there was an error.');
        }
      } catch (error) {
        console.error('Chat error:', error);
        this.addMessage('error', 'Connection error. Please try again.');
      } finally {
        this.setLoading(false);
        this.focusInput();
      }
    }
    
    addMessage(type, content, timestamp = null) {
      const messageDiv = document.createElement('div');
      messageDiv.className = 'chat-message';
      
      const time = timestamp || new Date().toLocaleTimeString();
      
      if (type === 'user') {
        messageDiv.innerHTML = `
          <div style="color: #00d4ff; margin: 1rem 0;">
            <span style="color: #00ff00; font-weight: bold;">you@terminal:~$ </span>${this.escapeHtml(content)}
            <span style="color: #666666; font-size: 12px; margin-left: 1rem;">[${time}]</span>
          </div>
        `;
      } else if (type === 'agent') {
        messageDiv.innerHTML = `
          <div style="color: #ffffff; margin: 1rem 0; margin-left: 2rem; white-space: pre-wrap;">
            ${this.escapeHtml(content)}
            <span style="color: #666666; font-size: 12px; display: block; margin-top: 0.5rem;">[${time}]</span>
          </div>
        `;
      } else if (type === 'error') {
        messageDiv.innerHTML = `
          <div style="color: #ff6b6b; margin: 1rem 0; margin-left: 2rem;">
            ❌ ${this.escapeHtml(content)}
          </div>
        `;
      }
      
      this.output.appendChild(messageDiv);
      this.scrollToBottom();
    }
    
    setLoading(isLoading) {
      this.sendButton.disabled = isLoading;
      this.input.disabled = isLoading;
      
      if (isLoading) {
        this.sendButton.querySelector('.button-text').textContent = 'Sending...';
        this.typingIndicator.classList.add('active');
        this.scrollToBottom();
      } else {
        this.sendButton.querySelector('.button-text').textContent = 'Send';
        this.typingIndicator.classList.remove('active');
      }
    }
    
    scrollToBottom() {
      this.output.scrollTop = this.output.scrollHeight;
    }
    
    escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  }

  // Feature button functions
  function startConversation(type) {
    const prompts = {
      natural: "Hello NeoChat! I'd like to have a natural conversation.",
      creative: "I need help with creative writing. Can you assist me?",
      problem: "I have a problem I'd like to solve. Can you help me think through it?",
      learning: "I want to learn something new today. What do you recommend?"
    };
    
    if (window.neoChatInterface) {
      window.neoChatInterface.input.value = prompts[type] || prompts.natural;
      window.neoChatInterface.input.focus();
      
      // Scroll to terminal
      document.querySelector('.terminal-container').scrollIntoView({ 
        behavior: 'smooth',
        block: 'center'
      });
    }
  }
  
  // Initialize when page loads
  document.addEventListener('DOMContentLoaded', () => {
    window.neoChatInterface = new NeoChatInterface();
  });
</script>
<% end %>