<section class="relative pt-20 pb-32 overflow-hidden">
  <div class="container mx-auto px-6 relative z-10">
    <div class="flex flex-col lg:flex-row items-center gap-12">
      
      <!-- Hero Content -->
      <div class="lg:w-1/2 text-center lg:text-left">
        <div class="mb-6">
          <span class="inline-block px-4 py-2 bg-purple-600/20 border border-purple-500/30 rounded-full text-purple-300 text-sm font-medium mb-4">
            ðŸš€ 24 AI Agents Ready to Deploy
          </span>
        </div>
        
        <h1 class="text-5xl lg:text-7xl font-bold mb-6 leading-tight">
          <span class="text-gradient">OneLastAI</span><br>
          <span class="text-white">Enterprise Platform</span>
        </h1>
        
        <p class="text-xl text-gray-300 mb-8 leading-relaxed max-w-2xl">
          Deploy intelligent AI agents instantly. From conversational AI to specialized automation, 
          our platform delivers enterprise-grade solutions with zero configuration.
        </p>
        
        <div class="flex flex-col sm:flex-row gap-4 mb-8">
          <button class="btn-primary group">
            Start Building
            <span class="ml-2 transform group-hover:translate-x-1 transition-transform">â†’</span>
          </button>
          <button class="btn-secondary">
            View Documentation
          </button>
        </div>
        
        <div class="flex items-center gap-8 text-sm text-gray-400">
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-green-400 rounded-full pulse-glow"></div>
            <span>24 Agents Online</span>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-blue-400 rounded-full"></div>
            <span>99.9% Uptime</span>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-purple-400 rounded-full"></div>
            <span>Enterprise Ready</span>
          </div>
        </div>
      </div>
      
      <!-- Terminal Demo -->
      <div class="lg:w-1/2 relative">
        <div class="floating-animation">
          <div class="terminal-window max-w-lg mx-auto bg-black text-sm p-4 rounded-lg shadow-lg font-mono text-white relative overflow-hidden">
            <div class="terminal-header flex items-center mb-4">
              <div class="terminal-dot bg-red-500 w-3 h-3 rounded-full mr-1"></div>
              <div class="terminal-dot bg-yellow-500 w-3 h-3 rounded-full mr-1"></div>
              <div class="terminal-dot bg-green-500 w-3 h-3 rounded-full mr-2"></div>
              <span class="text-gray-400 text-sm">generation@onelastAI:~</span>
            </div>
            <div id="terminal-output" class="terminal-content whitespace-pre-wrap text-sm"></div>
            <div class="absolute inset-0 pointer-events-none z-0">
              <div class="blur-3xl w-full h-full bg-gradient-to-br from-purple-500/10 via-blue-500/10 to-transparent"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Background decorations -->
  <div class="absolute inset-0 overflow-hidden">
    <div class="absolute -top-40 -right-40 w-80 h-80 bg-purple-600/20 rounded-full blur-3xl"></div>
    <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-600/20 rounded-full blur-3xl"></div>
  </div>
</section>

<script>
  const terminal = document.getElementById('terminal-output');
  const lines = [
    '$ echo "I am the operator. The terminal listens. The agents rise."',
    'â†’ Manifesto accepted.',
    '$ curl -X POST https://api.onelastai.com/agents',
    'â†’ Initializing AI agents...',
    'âœ“ NeoChat: Ready for conversations',
    'âœ“ EmotiSense: Emotion analysis active',
    'âœ“ CineGen: Video generation online',
    'âœ“ ContentCrafter: Content engine ready',
    '$ Deployed 24 agents in 0.3s'
  ];

  let index = 0;
  let currentCharIndex = 0;
  let currentLine = null;
  
  function typeLine() {
    if (index >= lines.length) return;
    
    // Create new line if we're starting a new one
    if (currentCharIndex === 0) {
      currentLine = document.createElement('div');
      currentLine.className = 'terminal-line mb-2';
      terminal.appendChild(currentLine);
    }
    
    const lineText = lines[index];
    const displayText = lineText.slice(0, currentCharIndex + 1);
    
    // Style the line based on its content
    if (lineText.startsWith('$')) {
      currentLine.innerHTML = `<span class="text-purple-400">$</span> <span class="text-white">${displayText.slice(2)}</span><span class="terminal-cursor">_</span>`;
    } else if (lineText.startsWith('âœ“')) {
      currentLine.innerHTML = `<span class="text-green-400">âœ“</span> <span class="text-gray-300">${displayText.slice(1)}</span><span class="terminal-cursor">_</span>`;
    } else if (lineText.startsWith('â†’')) {
      currentLine.innerHTML = `<span class="text-yellow-400">â†’</span> <span class="text-gray-400">${displayText.slice(1)}</span><span class="terminal-cursor">_</span>`;
    } else {
      currentLine.innerHTML = `<span class="text-white">${displayText}</span><span class="terminal-cursor">_</span>`;
    }
    
    currentCharIndex++;
    
    // Check if we've finished typing this line
    if (currentCharIndex > lineText.length) {
      // Remove cursor and finalize line
      if (lineText.startsWith('$')) {
        currentLine.innerHTML = `<span class="text-purple-400">$</span> <span class="text-white">${lineText.slice(2)}</span>`;
      } else if (lineText.startsWith('âœ“')) {
        currentLine.innerHTML = `<span class="text-green-400">âœ“</span> <span class="text-gray-300">${lineText.slice(1)}</span>`;
      } else if (lineText.startsWith('â†’')) {
        currentLine.innerHTML = `<span class="text-yellow-400">â†’</span> <span class="text-gray-400">${lineText.slice(1)}</span>`;
      } else {
        currentLine.innerHTML = `<span class="text-white">${lineText}</span>`;
      }
      
      // Move to next line
      index++;
      currentCharIndex = 0;
      setTimeout(typeLine, 800); // Pause between lines
    } else {
      setTimeout(typeLine, 50); // Typing speed
    }
  }   currentLine.className = 'terminal-line mb-2';
      terminal.appendChild(currentLine);
    }
    
    const lineText = lines[index];
    const displayText = lineText.slice(0, currentCharIndex + 1);
    
    // Style the line based on its content
    if (lineText.startsWith('$')) {
      currentLine.innerHTML = `<span class="text-purple-400">$</span> <span class="text-white">${displayText.slice(2)}</span><span class="terminal-cursor">_</span>`;
    } else if (lineText.startsWith('âœ“')) {
      currentLine.innerHTML = `<span class="text-green-400">âœ“</span> <span class="text-gray-300">${displayText.slice(1)}</span><span class="terminal-cursor">_</span>`;
    } else if (lineText.startsWith('â†’')) {
      currentLine.innerHTML = `<span class="text-yellow-400">â†’</span> <span class="text-gray-400">${displayText.slice(1)}</span><span class="terminal-cursor">_</span>`;
    } else {
      currentLine.innerHTML = `<span class="text-white">${displayText}</span><span class="terminal-cursor">_</span>`;
    }
    
    currentCharIndex++;
    
    // Check if we've finished typing this line
    if (currentCharIndex > lineText.length) {
      // Remove cursor and finalize line
      if (lineText.startsWith('$')) {
        currentLine.innerHTML = `<span class="text-purple-400">$</span> <span class="text-white">${lineText.slice(2)}</span>`;
      } else if (lineText.startsWith('âœ“')) {
        currentLine.innerHTML = `<span class="text-green-400">âœ“</span> <span class="text-gray-300">${lineText.slice(1)}</span>`;
      } else if (lineText.startsWith('â†’')) {
        currentLine.innerHTML = `<span class="text-yellow-400">â†’</span> <span class="text-gray-400">${lineText.slice(1)}</span>`;
      } else {
        currentLine.innerHTML = `<span class="text-white">${lineText}</span>`;
      }
      
      // Move to next line
      index++;
      currentCharIndex = 0;
      setTimeout(typeLine, 800); // Pause between lines
    } else {
      setTimeout(typeLine, 50); // Typing speed
    }
  }

  window.addEventListener('DOMContentLoaded', typeLine);
</script>
<style>
  .terminal-cursor {
    color: #10b981;
    animation: blink 1s infinite;
    font-weight: bold;
    margin-left: 2px;
  }
  
  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }
  
  .terminal-line {
    line-height: 1.6;
    margin-bottom: 0.5rem;
    font-family: 'Courier New', monospace;
  }
  
  .text-gradient {
    background: linear-gradient(to right, #a78bfa, #f472b6, #8b5cf6);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    color: transparent;
  }
  
  .btn-primary {
    @apply bg-purple-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-purple-700 transition;
  }
  
  .btn-secondary {
    @apply bg-gray-800 text-gray-300 px-6 py-3 rounded-lg font-semibold hover:bg-gray-700 transition;
  }
  
  .pulse-glow {
    animation: pulseGlow 2s infinite;
  }
  
  @keyframes pulseGlow {
    0%, 100% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7); }
    50% { box-shadow: 0 0 10px 10px rgba(16, 185, 129, 0); }
  }
  
  .floating-animation {
    animation: floatUpDown 6s ease-in-out infinite;
  }
  
  @keyframes floatUpDown {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
  }
</style>