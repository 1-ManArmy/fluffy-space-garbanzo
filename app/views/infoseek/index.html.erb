<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>InfoSeek - IP Intelligence Terminal | onelastai.com</title>
  
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  
  <!-- Custom InfoSeek Styles -->
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Consolas', 'Monaco', 'Lucida Console', monospace;
      background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
      color: #00d4ff;
      min-height: 100vh;
      overflow-x: hidden;
      padding-top: 60px; /* Space for fixed menu bar */
    }
    
    /* Hide global menu for terminal interface */
    .global-menu-bar {
      display: none !important;
    }
    
    /* Hero Section */
    .hero-section {
      padding: 4rem 2rem;
      text-align: center;
      background: radial-gradient(ellipse at center, rgba(0, 212, 255, 0.1) 0%, rgba(0, 0, 0, 0.3) 70%);
      border-bottom: 2px solid #00d4ff;
      position: relative;
    }
    
    .hero-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="%2300d4ff" stroke-width="0.5" opacity="0.3"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
      opacity: 0.2;
      animation: gridMove 20s linear infinite;
    }
    
    @keyframes gridMove {
      0% { transform: translate(0, 0); }
      100% { transform: translate(10px, 10px); }
    }
    
    .hero-content {
      position: relative;
      z-index: 1;
    }
    
    .agent-logo {
      font-size: 4rem;
      margin-bottom: 1rem;
      text-shadow: 0 0 20px #00d4ff;
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0%, 100% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.05); opacity: 0.8; }
    }
    
    .agent-title {
      font-size: 3rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
      text-shadow: 0 0 10px #00d4ff;
      background: linear-gradient(45deg, #00d4ff, #ffffff);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .agent-tagline {
      font-size: 1.2rem;
      color: #b3b3b3;
      margin-bottom: 2rem;
      opacity: 0.9;
    }
    
    .agent-description {
      max-width: 600px;
      margin: 0 auto 2rem;
      color: #cccccc;
      line-height: 1.6;
      font-size: 1rem;
    }
    
    .agent-stats {
      display: flex;
      justify-content: center;
      gap: 2rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }
    
    .stat-item {
      background: rgba(0, 212, 255, 0.1);
      border: 1px solid #00d4ff;
      border-radius: 8px;
      padding: 1rem;
      min-width: 120px;
      text-align: center;
    }
    
    .stat-value {
      font-size: 1.5rem;
      font-weight: bold;
      color: #00d4ff;
      display: block;
    }
    
    .stat-label {
      font-size: 0.8rem;
      color: #b3b3b3;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    /* Terminal Section */
    .terminal-section {
      padding: 2rem;
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .terminal-header {
      text-align: center;
      margin-bottom: 2rem;
    }
    
    .terminal-title {
      font-size: 1.5rem;
      color: #00d4ff;
      margin-bottom: 0.5rem;
    }
    
    .terminal-subtitle {
      color: #b3b3b3;
      font-size: 0.9rem;
    }
    
    .terminal-container {
      background: #000000;
      border: 2px solid #00d4ff;
      border-radius: 12px;
      box-shadow: 0 0 30px rgba(0, 212, 255, 0.3);
      overflow: hidden;
      position: relative;
    }
    
    .terminal-titlebar {
      background: linear-gradient(90deg, #00d4ff 0%, #0099cc 100%);
      padding: 0.75rem 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .terminal-button {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: #ff5f56;
    }
    
    .terminal-button.yellow { background: #ffbd2e; }
    .terminal-button.green { background: #27ca3f; }
    
    .terminal-title-text {
      margin-left: 1rem;
      color: #000;
      font-weight: bold;
      font-size: 0.9rem;
    }
    
    .terminal-output {
      height: 400px;
      padding: 1rem;
      overflow-y: auto;
      background: #000000;
      color: #00ff00;
      font-family: 'Consolas', 'Monaco', monospace;
      font-size: 14px;
      line-height: 1.4;
    }
    
    .terminal-output::-webkit-scrollbar {
      width: 8px;
    }
    
    .terminal-output::-webkit-scrollbar-track {
      background: #1a1a1a;
    }
    
    .terminal-output::-webkit-scrollbar-thumb {
      background: #00d4ff;
      border-radius: 4px;
    }
    
    .terminal-output::-webkit-scrollbar-thumb:hover {
      background: #00a8cc;
    }

    /* Sticky Menu Bar */
    .menu-bar {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background: linear-gradient(90deg, #0a0a0a 0%, #1a1a2e 50%, #0a0a0a 100%);
      border-bottom: 2px solid #00d4ff;
      box-shadow: 0 2px 10px rgba(0, 212, 255, 0.3);
      z-index: 9999;
      padding: 0.5rem 1rem;
      font-family: 'Consolas', 'Monaco', monospace;
    }

    .menu-items {
      display: flex;
      gap: 0;
      align-items: center;
    }

    .menu-item {
      position: relative;
      display: inline-block;
    }

    .menu-button {
      background: transparent;
      border: 1px solid transparent;
      color: #00d4ff;
      padding: 0.5rem 1rem;
      cursor: pointer;
      font-family: inherit;
      font-size: 14px;
      transition: all 0.2s ease;
      border-radius: 4px;
    }

    .menu-button:hover {
      background: rgba(0, 212, 255, 0.1);
      border-color: #00d4ff;
      box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
    }

    .menu-button.active {
      background: rgba(0, 212, 255, 0.2);
      border-color: #00d4ff;
    }

    /* Terminal-style Dropdown */
    .dropdown {
      position: absolute;
      top: 100%;
      left: 0;
      background: #000000;
      border: 2px solid #00d4ff;
      border-radius: 8px;
      box-shadow: 0 5px 20px rgba(0, 212, 255, 0.4);
      min-width: 250px;
      max-height: 400px;
      overflow-y: auto;
      opacity: 0;
      visibility: hidden;
      transform: translateY(-10px);
      transition: all 0.3s ease;
      z-index: 10000;
    }

    .dropdown.active {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }

    .dropdown-header {
      background: linear-gradient(90deg, #00d4ff 0%, #0099cc 100%);
      color: #000;
      padding: 0.5rem 1rem;
      font-weight: bold;
      font-size: 12px;
      border-bottom: 1px solid #00d4ff;
    }

    /* Linux Tree Structure */
    .tree-container {
      padding: 0.5rem;
      color: #00ff00;
      font-family: 'Consolas', 'Monaco', monospace;
      font-size: 12px;
      line-height: 1.3;
    }

    .tree-item {
      position: relative;
      padding: 0.2rem 0;
      cursor: pointer;
      transition: background 0.2s ease;
    }

    .tree-item:hover {
      background: rgba(0, 255, 0, 0.1);
    }

    .tree-item.expandable {
      position: relative;
    }

    .tree-item.expandable::before {
      content: "├── ";
      color: #00d4ff;
    }

    .tree-item.last::before {
      content: "└── ";
      color: #00d4ff;
    }

    .tree-item.folder::after {
      content: "/";
      color: #ffff00;
    }

    .tree-item.executable {
      color: #00ff00;
      font-weight: bold;
    }

    .tree-item.config {
      color: #ff9900;
    }

    .tree-item.link {
      color: #ff00ff;
    }

    .tree-children {
      margin-left: 1.5rem;
      border-left: 1px solid #333;
      padding-left: 0.5rem;
      display: none;
    }

    .tree-children.expanded {
      display: block;
    }

    .tree-children .tree-item::before {
      content: "├── ";
      color: #00d4ff;
    }

    .tree-children .tree-item:last-child::before {
      content: "└── ";
      color: #00d4ff;
    }

    /* Sub-menu arrow */
    .has-submenu::after {
      content: " ▶";
      color: #ffff00;
      font-size: 10px;
      margin-left: 0.5rem;
    }

    .tree-item.expanded .has-submenu::after {
      content: " ▼";
    }
    
    .terminal-message {
      margin-bottom: 1rem;
      display: block;
    }
    
    .user-message {
      color: #00d4ff;
    }
    
    .user-message::before {
      content: '$ ';
      color: #00ff00;
      font-weight: bold;
    }
    
    .agent-message {
      color: #ffffff;
      margin-left: 2rem;
      white-space: pre-wrap;
      word-wrap: break-word;
    }
    
    .timestamp {
      color: #666666;
      font-size: 12px;
      margin-left: 1rem;
    }
    
    .terminal-input-container {
      background: #111111;
      border-top: 1px solid #333333;
      padding: 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .terminal-prompt {
      color: #00ff00;
      font-weight: bold;
      flex-shrink: 0;
    }
    
    .terminal-input {
      flex: 1;
      background: transparent;
      border: none;
      color: #00d4ff;
      font-family: inherit;
      font-size: 14px;
      outline: none;
      padding: 0.5rem;
    }
    
    .terminal-input::placeholder {
      color: #666666;
    }
    
    .send-button {
      background: linear-gradient(45deg, #00d4ff, #0099cc);
      border: none;
      border-radius: 6px;
      color: #000;
      padding: 0.5rem 1rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      font-family: inherit;
    }
    
    .send-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0, 212, 255, 0.4);
    }
    
    .send-button:active {
      transform: translateY(0);
    }
    
    .loading {
      opacity: 0.6;
      pointer-events: none;
    }
    
    .typing-indicator {
      color: #00ff00;
      display: none;
    }
    
    .typing-indicator.active {
      display: block;
    }
    
    .typing-indicator::after {
      content: '...';
      animation: typing 1.5s infinite;
    }
    
    @keyframes typing {
      0%, 60% { content: '...'; }
      20% { content: '.'; }
      40% { content: '..'; }
    }
    
    /* Welcome message */
    .welcome-message {
      color: #00ff00;
      margin-bottom: 1rem;
    }
    
    .system-info {
      color: #666666;
      font-size: 12px;
      margin-bottom: 1rem;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .hero-section {
        padding: 2rem 1rem;
      }
      
      .agent-title {
        font-size: 2rem;
      }
      
      .agent-stats {
        gap: 1rem;
      }
      
      .terminal-section {
        padding: 1rem;
      }
      
      .terminal-output {
        height: 300px;
      }
    }
  </style>
</head>

<body>
  <!-- Sticky Menu Bar -->
  <nav class="menu-bar">
    <div class="menu-items">
      <div class="menu-item">
        <button class="menu-button" onclick="toggleDropdown('file-menu')">File</button>
        <div id="file-menu" class="dropdown">
          <div class="dropdown-header">IP Intelligence Operations</div>
          <div class="tree-container">
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              investigations
              <div class="tree-children">
                <div class="tree-item executable" onclick="newInvestigation()">new_lookup.sh</div>
                <div class="tree-item config" onclick="loadHistory()">lookup_history.log</div>
                <div class="tree-item config" onclick="exportResults()">results_export.json</div>
                <div class="tree-item last config" onclick="clearHistory()">clear_cache.sh</div>
              </div>
            </div>
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              settings
              <div class="tree-children">
                <div class="tree-item config" onclick="openSettings()">ipinfo_config.yml</div>
                <div class="tree-item config" onclick="openPreferences()">api_keys.ini</div>
                <div class="tree-item last link" onclick="openThemes()">terminal_theme.conf → /usr/share/themes/</div>
              </div>
            </div>
            <div class="tree-item last executable" onclick="exitInfoSeek()">exit.sh</div>
          </div>
        </div>
      </div>

      <div class="menu-item">
        <button class="menu-button" onclick="toggleDropdown('features-menu')">Features</button>
        <div id="features-menu" class="dropdown">
          <div class="dropdown-header">IP Intelligence Capabilities</div>
          <div class="tree-container">
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              lookup_tools
              <div class="tree-children">
                <div class="tree-item executable" onclick="setMode('geolocation')">ip_geolocation.py</div>
                <div class="tree-item executable" onclick="setMode('network')">network_analysis.py</div>
                <div class="tree-item executable" onclick="setMode('security')">security_check.py</div>
                <div class="tree-item last executable" onclick="setMode('forensics')">digital_forensics.py</div>
              </div>
            </div>
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              investigation
              <div class="tree-children">
                <div class="tree-item executable" onclick="openWhois()">whois_lookup.sh</div>
                <div class="tree-item executable" onclick="openTraceroute()">traceroute.py</div>
                <div class="tree-item executable" onclick="openPortScan()">port_scanner.rb</div>
                <div class="tree-item last config" onclick="openThreatIntel()">threat_intel.js</div>
              </div>
            </div>
            <div class="tree-item last folder has-submenu" onclick="toggleSubmenu(this)">
              databases
              <div class="tree-children">
                <div class="tree-item config" onclick="showIPInfo()">ipinfo.db → /var/lib/infoseek/</div>
                <div class="tree-item last link" onclick="showGeoIP()">maxmind_geoip.sqlite → /usr/share/GeoIP/</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="menu-item">
        <button class="menu-button" onclick="toggleDropdown('agents-menu')">Agents</button>
        <div id="agents-menu" class="dropdown">
          <div class="dropdown-header">InfoSeek Network</div>
          <div class="tree-container">
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              active
              <div class="tree-children">
                <div class="tree-item executable config">infoseek.service ● running</div>
                <div class="tree-item last link" onclick="switchAgent('ipinfo')">ipinfo_api.agent → /apis/ipinfo/</div>
              </div>
            </div>
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              available
              <div class="tree-children">
                <div class="tree-item executable" onclick="switchAgent('netscope')">netscope.agent</div>
                <div class="tree-item executable" onclick="switchAgent('datasphere')">datasphere.agent</div>
                <div class="tree-item executable" onclick="switchAgent('cinegen')">cinegen.agent</div>
                <div class="tree-item last config" onclick="createAgent()">custom_intel.template</div>
              </div>
            </div>
            <div class="tree-item last folder has-submenu" onclick="toggleSubmenu(this)">
              network
              <div class="tree-children">
                <div class="tree-item config">infoseek.onelastai.com</div>
                <div class="tree-item config">ipinfo.status</div>
                <div class="tree-item last link">api.endpoint → https://api.onelastai.com/infoseek/</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="menu-item">
        <button class="menu-button" onclick="toggleDropdown('help-menu')">Help</button>
        <div id="help-menu" class="dropdown">
          <div class="dropdown-header">InfoSeek Documentation & Support</div>
          <div class="tree-container">
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              docs
              <div class="tree-children">
                <div class="tree-item config" onclick="showDocs('getting-started')">ip_lookup_guide.md</div>
                <div class="tree-item config" onclick="showDocs('commands')">infoseek_commands.txt</div>
                <div class="tree-item config" onclick="showDocs('api')">ipinfo_api_docs.html</div>
                <div class="tree-item last config" onclick="showDocs('examples')">lookup_examples.json</div>
              </div>
            </div>
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              support
              <div class="tree-children">
                <div class="tree-item link" onclick="openInfoSeekSupport()">github.com/onelastai/InfoSeek</div>
                <div class="tree-item link" onclick="openDiscord()">discord.gg/onelastai</div>
                <div class="tree-item last config" onclick="reportBug()">infoseek_bug_report.template</div>
              </div>
            </div>
            <div class="tree-item last executable" onclick="showAbout()">about_infoseek.sh</div>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <!-- Hero Section -->
  <section class="hero-section">
    <div class="hero-content">
      <div class="agent-logo">🌐</div>
      <h1 class="agent-title">InfoSeek</h1>
      <p class="agent-tagline">IP Intelligence & Network Research Specialist</p>
      <p class="agent-description">
        I am InfoSeek, your expert IP intelligence and network research specialist. I provide detailed 
        information about IP addresses, domains, network infrastructure, and digital investigations. 
        Simply enter an IP address or domain name to get comprehensive geolocation, security, and 
        network analysis powered by industry-leading databases like IPinfo.io.
      </p>
      
      <div class="agent-stats">
        <div class="stat-item">
          <span class="stat-value"><%= @agent_stats[:total_conversations] %></span>
          <span class="stat-label">Conversations</span>
        </div>
        <div class="stat-item">
          <span class="stat-value"><%= @agent_stats[:average_rating] %></span>
          <span class="stat-label">Rating</span>
        </div>
        <div class="stat-item">
          <span class="stat-value"><%= @agent_stats[:response_time] %></span>
          <span class="stat-label">Response Time</span>
        </div>
      </div>
    </div>
  </section>

  <!-- Terminal Section -->
  <section class="terminal-section">
    <div class="terminal-header">
      <h2 class="terminal-title">🌐 InfoSeek IP Intelligence Terminal</h2>
      <p class="terminal-subtitle">Enter IP addresses, domains, or commands for comprehensive network intelligence</p>
    </div>
    
    <div class="terminal-container">
      <div class="terminal-titlebar">
        <div class="terminal-button"></div>
        <div class="terminal-button yellow"></div>
        <div class="terminal-button green"></div>
        <span class="terminal-title-text">infoseek@ipintel.com:~$</span>
      </div>
      
      <div class="terminal-output" id="terminal-output">
        <div class="welcome-message">
╔══════════════════════════════════════════════════════════════════╗
║                       Welcome to InfoSeek                        ║
║             IP Intelligence & Network Research Terminal           ║
╚══════════════════════════════════════════════════════════════════╝

<div class="system-info">System: InfoSeek v2.0 | Status: Online | Agent ID: infoseek-demo
<%= Time.current.strftime("Date: %Y-%m-%d %H:%M:%S") %> | Session: Active</div>

<span style="color: #00d4ff;">Welcome! I'm InfoSeek, your IP intelligence specialist.</span>

I can help you with:
• 🌐 IP Address Geolocation & Analysis
• � Domain & Network Investigation  
• �️ Security Threat Assessment
• � Network Performance Analysis
• 🕵️ Digital Forensics & OSINT
• � ISP & Organization Identification

<span style="color: #ffff00;">Quick Start:</span> Just enter an IP address (e.g., 8.8.8.8) or domain name!

🌐 <span style="color: #00ff00;">What I can analyze for you:</span>

<span style="color: #ffff00;">📍 IP Address Intelligence:</span>
• Precise geolocation (city, region, country, coordinates)
• ISP, organization, and network owner details  
• Internet service provider and connection type
• Time zone and local time information

<span style="color: #ffff00;">🔍 Domain Investigation:</span>
• WHOIS registration information and ownership
• DNS records (A, AAAA, MX, NS, TXT records)
• Subdomain discovery and mapping
• Domain reputation and security analysis

<span style="color: #ffff00;">🛡️ Security & Threat Analysis:</span>
• Reputation scoring and threat intelligence
• VPN, proxy, and anonymizer detection
• Malware and phishing domain checking
• Tor exit node identification

<span style="color: #ffff00;">📊 Network Performance:</span>
• Network latency and connectivity testing
• Traceroute and network path analysis
• Bandwidth estimation and connection quality
• Network topology and infrastructure mapping

<span style="color: #ffff00;">🚀 Quick Commands:</span>
• Type any IP: <span style="color: #00d4ff;">8.8.8.8</span>, <span style="color: #00d4ff;">1.1.1.1</span>, <span style="color: #00d4ff;">your-server-ip</span>
• Domain lookup: <span style="color: #00d4ff;">google.com</span>, <span style="color: #00d4ff;">github.com</span>, <span style="color: #00d4ff;">your-domain.com</span>
• Advanced: <span style="color: #00d4ff;">whois domain.com</span>, <span style="color: #00d4ff;">trace 8.8.8.8</span>, <span style="color: #00d4ff;">security check</span>

<div id="user-ip-info" style="margin-top: 1rem; padding: 1rem; background: rgba(0, 255, 0, 0.1); border: 1px solid #00ff00; border-radius: 5px;">
  <span style="color: #00ff00;">🔄 Detecting your IP address...</span>
</div>

        </div>
        
        <div class="typing-indicator" id="typing-indicator">
          InfoSeek is analyzing
        </div>
      </div>
      
      <div class="terminal-input-container">
        <span class="terminal-prompt">infoseek@intel:~$ </span>
        <input 
          type="text" 
          class="terminal-input" 
          id="user-input"
          placeholder="Enter IP address, domain, or query..."
          autocomplete="off"
        >
        <button class="send-button" id="send-button">Send</button>
      </div>
    </div>
  </section>

  <script>
    // Menu System Functions
    function toggleDropdown(menuId) {
      // Close all other dropdowns first
      const allDropdowns = document.querySelectorAll('.dropdown');
      allDropdowns.forEach(dropdown => {
        if (dropdown.id !== menuId) {
          dropdown.classList.remove('active');
        }
      });
      
      // Toggle the target dropdown
      const dropdown = document.getElementById(menuId);
      dropdown.classList.toggle('active');
      
      // Toggle active state on menu button
      const button = dropdown.previousElementSibling;
      button.classList.toggle('active');
    }

    function toggleSubmenu(element) {
      const children = element.querySelector('.tree-children');
      if (children) {
        children.classList.toggle('expanded');
        element.classList.toggle('expanded');
      }
    }

    // Close dropdowns when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.menu-item')) {
        const allDropdowns = document.querySelectorAll('.dropdown');
        const allButtons = document.querySelectorAll('.menu-button');
        
        allDropdowns.forEach(dropdown => {
          dropdown.classList.remove('active');
        });
        
        allButtons.forEach(button => {
          button.classList.remove('active');
        });
      }
    });

    // InfoSeek Menu Action Functions
    function newInvestigation() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ ./new_lookup.sh\nStarting new IP investigation session...\nInvestigation cleared. Ready for IP intelligence queries!');
        window.terminal.output.innerHTML = '';
        window.terminal.focusInput();
      }
    }

    function newConversation() {
      newInvestigation(); // Redirect to InfoSeek-specific function
    }

    function loadHistory() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ cat lookup_history.log\nLoading IP lookup history...\n[Feature coming soon - investigation persistence]');
      }
    }

    function exportResults() {
      if (window.terminal) {
        const resultsData = {
          timestamp: new Date().toISOString(),
          agent: 'infoseek',
          investigations: [],
          api_version: 'v2.0'
        };
        
        const blob = new Blob([JSON.stringify(resultsData, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `infoseek-results-${Date.now()}.json`;
        a.click();
        URL.revokeObjectURL(url);
    function clearHistory() {
      if (window.terminal && confirm('Clear all investigation history? This cannot be undone.')) {
        window.terminal.output.innerHTML = '';
        window.terminal.addMessage('system', '$ ./clear_cache.sh\nClearing investigation history...\nCache cleared successfully!');
      }
    }

    function openSettings() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ nano ipinfo_config.yml\nOpening InfoSeek configuration...\n[IP Intelligence settings panel coming soon]');
      }
    }

    function openPreferences() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ vim api_keys.ini\nOpening API key preferences...\n[IPinfo.io API configuration coming soon]');
      }
    } if (window.terminal) {
        window.terminal.addMessage('system', '$ nano config.yml\nOpening NeoChat configuration...\n[Settings panel coming soon]');
      }
    }

    function openPreferences() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ vim preferences.ini\nOpening user preferences...\n[Preferences panel coming soon]');
      }
    }

    function openThemes() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ ls /usr/share/themes/\nAvailable themes:\n├── matrix-green\n├── cyber-blue\n├── neon-purple\n└── classic-amber\n[Theme switching coming soon]');
    function setMode(mode) {
      if (window.terminal) {
        const modeMessages = {
          geolocation: '$ python3 ip_geolocation.py\nActivating IP geolocation mode...\nReady for location-based IP analysis!',
          network: '$ python3 network_analysis.py\nActivating network analysis mode...\nReady for ISP and infrastructure investigation!',
          security: '$ python3 security_check.py\nActivating security mode...\nReady for threat intelligence and reputation analysis!',
          forensics: '$ python3 digital_forensics.py\nActivating forensics mode...\nReady for digital investigation and OSINT!'
        };
        
        window.terminal.addMessage('system', modeMessages[mode] || 'InfoSeek mode activated');
      }
    }

    // InfoSeek-specific tool functions
    function openWhois() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ ./whois_lookup.sh\nActivating WHOIS lookup tool...\n[Domain registration investigation tool ready]');
      }
    }

    function openTraceroute() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ python3 traceroute.py\nActivating network path analysis...\n[Route tracing tool ready]');
      }
    }

    function openPortScan() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ ruby port_scanner.rb\nActivating port scanner...\n[Network service discovery tool ready]');
      }
    }

    function openThreatIntel() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ node threat_intel.js\nActivating threat intelligence...\n[Security reputation analysis ready]');
      }
    }

    function showIPInfo() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ ls /var/lib/infoseek/\nIPinfo.io database status:\n├── ipinfo.db (Active)\n├── geolocation.cache (Updated)\n└── api_quota.log (75% remaining)');
      }
    }

    function showGeoIP() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ ls /usr/share/GeoIP/\nMaxMind GeoIP database status:\n├── GeoLite2-City.mmdb (Current)\n├── GeoLite2-Country.mmdb (Current)\n└── GeoLite2-ASN.mmdb (Current)');
      }
    }   const modeMessages = {
          question: '$ python3 question_answering.py\nActivating Q&A mode...\nReady to answer your questions!',
          creative: '$ python3 creative_writing.py\nActivating creative mode...\nReady for creative tasks and brainstorming!',
          problem: '$ python3 problem_solving.py\nActivating problem-solving mode...\nReady to tackle complex problems!',
          analysis: '$ python3 data_analysis.py\nActivating analysis mode...\nReady for data analysis and insights!'
        };
        
        window.terminal.addMessage('system', m    function showAbout() {
      if (window.terminal) {
        window.terminal.addMessage('system', `$ ./about_infoseek.sh
╔══════════════════════════════════════╗
║             InfoSeek v2.0            ║
║                                      ║
║     IP Intelligence Terminal         ║
║     Built by onelastai.com          ║
║                                      ║
║  • IP Geolocation & Analysis         ║
║  • Network Investigation Tools       ║
║  • Security Threat Assessment        ║
║  • Digital Forensics & OSINT         ║
║  • Powered by IPinfo.io API          ║
║                                      ║
║  © 2025 onelastai.com               ║
╚══════════════════════════════════════╝`);
      }
    }

    function showDocs(docType) {
      if (window.terminal) {
        const docs = {
          'getting-started': 'Welcome to InfoSeek!

Quick Start Guide:
- Enter any IP address (e.g., 8.8.8.8)
- Type domain names for analysis
- Use menu for advanced features
- Export investigation results as JSON
',
          'commands': 'InfoSeek Commands:
- [IP] - Instant IP lookup
- [domain] - Domain investigation
- /whois [domain] - Registration info
- /trace [IP] - Network path analysis
- /security [IP] - Threat assessment
',
          'api': 'InfoSeek API Integration:

Endpoints:
- POST /infoseek/chat - IP Intelligence
- GET /infoseek/status - Service status
- POST /infoseek/deep_research - Comprehensive analysis

Powered by:
- IPinfo.io API
- MaxMind GeoIP2
- Threat intelligence feeds
',
          'examples': '{
  "ip_lookup_examples": [
    {"input": "8.8.8.8", "type": "Google DNS"},
    {"input": "1.1.1.1", "type": "Cloudflare DNS"},
    {"input": "github.com", "type": "Domain analysis"}
  ]
}'
        };
        
        window.terminal.addMessage('system', `$ cat ${docType}.md
${docs[docType] || 'Documentation not found'}`);
      }
    }

    // Terminal Chat Functionality - Updated for InfoSeek
    class InfoSeekTerminal {em', '$ cp custom.template my_agent.py\nCreating custom agent...\n[Custom agent creation coming soon]');
      }
    }

    function showDocs(docType) {
      if (window.terminal) {
        const docs = {
          'getting-started': 'Welcome to InfoSeek!\n\nBasic Commands:\n- Type your message and press Enter\n- Use the menu for advanced features\n- Export conversations as JSON\n- Enter IP addresses for instant lookup\n',
    function openInfoSeekSupport() {
      window.open('https://github.com/onelastai/InfoSeek', '_blank');
    }

    function openSupport() {
      openInfoSeekSupport(); // Redirect to InfoSeek-specific function
    }

    function openDiscord() {
      window.open('https://discord.gg/onelastai', '_blank');
    }

    function reportBug() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ nano infoseek_bug_report.template\nOpening InfoSeek bug report template...\n[IP Intelligence bug reporting system coming soon]');
      }
    }
    function openDiscord() {
      window.open('https://discord.gg/onelastai', '_blank');
    }

    function reportBug() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ nano bug_report.template\nOpening bug report template...\n[Bug reporting system coming soon]');
      }
    }

    function showAbout() {
      if (window.terminal) {
        window.terminal.addMessage('system', `$ ./about.sh
╔══════════════════════════════════════╗
║              NeoChat v1.0            ║
║                                      ║
║     AI Conversation Terminal         ║
║     Built by onelastai.com          ║
║                                      ║
║  • Intelligent conversation AI       ║
║  • Terminal-style interface          ║
║  • Multi-modal capabilities          ║
║  • Real-time responses              ║
║                                      ║
║  © 2025 onelastai.com               ║
╚══════════════════════════════════════╝`);
      }
    }

    // Terminal Chat Functionality - InfoSeek
    class InfoSeekTerminal {
      constructor() {
        this.output = document.getElementById('terminal-output');
        this.input = document.getElementById('user-input');
        this.sendButton = document.getElementById('send-button');
        this.typingIndicator = document.getElementById('typing-indicator');
        
        this.setupEventListeners();
        this.focusInput();
        this.detectUserIP(); // Add IP detection
      }
      
      setupEventListeners() {
        this.input.addEventListener('keypress', (e) => {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            this.sendMessage();
          }
        });
        
    }
    
    // Initialize InfoSeek terminal when page loads
    document.addEventListener('DOMContentLoaded', () => {
      window.terminal = new InfoSeekTerminal();
    }); this.output.addEventListener('click', () => {
          this.input.focus();
        });
      }
      
      focusInput() {
        this.input.focus();
      }
      
      async sendMessage() {
        const message = this.input.value.trim();
        if (!message) return;
        
        // Display user message
        this.addMessage('user', message);
        this.input.value = '';
        
        // Show loading state
        this.setLoading(true);
        this.showTyping(true);
        
        try {
          const response = await fetch('/infoseek/chat', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({ message: message })
          });
          
          const data = await response.json();
          
          if (data.success) {
            this.addMessage('agent', data.response, data.timestamp);
          } else {
            this.addMessage('error', data.error || 'Sorry, there was an error processing your message.');
          }
        } catch (error) {
          console.error('Chat error:', error);
          this.addMessage('error', 'Connection error. Please check your internet and try again.');
        } finally {
          this.setLoading(false);
          this.showTyping(false);
          this.focusInput();
        }
      }
      
      addMessage(type, content, timestamp = null) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'terminal-message';
        
        const time = timestamp || new Date().toLocaleTimeString();
        
        if (type === 'user') {
          messageDiv.innerHTML = `<span class="user-message">${this.escapeHtml(content)}</span><span class="timestamp">[${time}]</span>`;
        } else if (type === 'agent') {
          messageDiv.innerHTML = `<div class="agent-message">${this.escapeHtml(content)}</div><span class="timestamp">[${time}]</span>`;
        } else if (type === 'error') {
          messageDiv.innerHTML = `<div class="agent-message" style="color: #ff6b6b;">❌ ${this.escapeHtml(content)}</div>`;
        }
        
        this.output.appendChild(messageDiv);
        this.scrollToBottom();
      }
      
      setLoading(isLoading) {
        this.sendButton.disabled = isLoading;
        this.input.disabled = isLoading;
        
        if (isLoading) {
          this.sendButton.textContent = 'Sending...';
          this.sendButton.classList.add('loading');
        } else {
          this.sendButton.textContent = 'Send';
          this.sendButton.classList.remove('loading');
        }
      }
      
      showTyping(show) {
        if (show) {
          this.typingIndicator.classList.add('active');
          this.scrollToBottom();
        } else {
          this.typingIndicator.classList.remove('active');
        }
      }
      
      scrollToBottom() {
        this.output.scrollTop = this.output.scrollHeight;
      }
      
      escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      }
      
      // Detect user's IP address automatically
      async detectUserIP() {
        const userIpDiv = document.getElementById('user-ip-info');
        
        try {
          // Try multiple IP detection services for reliability
          let ipData = null;
          
          // First try: ipinfo.io (our primary service)
          try {
            const response = await fetch('https://ipinfo.io/json');
            if (response.ok) {
              ipData = await response.json();
            }
          } catch (e) {
            console.log('ipinfo.io unavailable, trying alternative...');
          }
          
          // Fallback: httpbin.org
          if (!ipData) {
            try {
              const response = await fetch('https://httpbin.org/ip');
              if (response.ok) {
                const data = await response.json();
                ipData = { ip: data.origin.split(',')[0].trim() };
              }
            } catch (e) {
              console.log('httpbin.org unavailable...');
            }
          }
          
          if (ipData && ipData.ip) {
            // Display comprehensive IP information if available
            let infoHtml = `<span style="color: #00ff00;">✅ Your Current IP Information:</span><br>`;
            infoHtml += `<span style="color: #00d4ff;">IP Address:</span> ${ipData.ip}<br>`;
            
            if (ipData.city && ipData.region && ipData.country) {
              infoHtml += `<span style="color: #00d4ff;">Location:</span> ${ipData.city}, ${ipData.region}, ${ipData.country}<br>`;
            }
            
            if (ipData.org) {
              infoHtml += `<span style="color: #00d4ff;">ISP/Organization:</span> ${ipData.org}<br>`;
            }
            
            if (ipData.timezone) {
              infoHtml += `<span style="color: #00d4ff;">Timezone:</span> ${ipData.timezone}<br>`;
            }
            
            infoHtml += `<span style="color: #ffff00;">💡 Click your IP to analyze: </span><button onclick="window.terminal.analyzeIP('${ipData.ip}')" style="background: #00d4ff; color: #000; border: none; padding: 2px 8px; border-radius: 3px; cursor: pointer; font-family: monospace;">${ipData.ip}</button>`;
            
            userIpDiv.innerHTML = infoHtml;
          } else {
            // If we can't detect IP, show a helpful message
            userIpDiv.innerHTML = `
              <span style="color: #ffff00;">⚠️ Unable to auto-detect your IP address</span><br>
              <span style="color: #cccccc;">Try entering your IP manually or check your internet connection</span><br>
              <span style="color: #00d4ff;">You can still analyze any other IP addresses!</span>
            `;
          }
        } catch (error) {
          console.error('IP detection error:', error);
          userIpDiv.innerHTML = `
            <span style="color: #ff6b6b;">❌ IP detection failed</span><br>
            <span style="color: #cccccc;">You can still manually enter IP addresses for analysis</span>
          `;
        }
      }
      
      // Method to analyze a specific IP
      analyzeIP(ipAddress) {
        this.input.value = ipAddress;
        this.sendMessage();
      }
    }
    
    // Initialize InfoSeek terminal when page loads
    document.addEventListener('DOMContentLoaded', () => {
      window.terminal = new InfoSeekTerminal();
    });
  </script>
</body>
</html>
