<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NeoChat - AI Conversation Terminal | onelastai.com</title>
  
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  
  <!-- Custom NeoChat Styles -->
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Consolas', 'Monaco', 'Lucida Console', monospace;
      background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
      color: #00d4ff;
      min-height: 100vh;
      overflow-x: hidden;
      padding-top: 0; /* NeoChat has its own menu, no global menu needed */
    }
    
    /* Hide global menu for terminal interface */
    .global-menu-bar {
      display: none !important;
    }
    
    /* Hero Section */
    .hero-section {
      padding: 4rem 2rem;
      text-align: center;
      background: radial-gradient(ellipse at center, rgba(0, 212, 255, 0.1) 0%, rgba(0, 0, 0, 0.3) 70%);
      border-bottom: 2px solid #00d4ff;
      position: relative;
    }
    
    .hero-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="%2300d4ff" stroke-width="0.5" opacity="0.3"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
      opacity: 0.2;
      animation: gridMove 20s linear infinite;
    }
    
    @keyframes gridMove {
      0% { transform: translate(0, 0); }
      100% { transform: translate(10px, 10px); }
    }
    
    .hero-content {
      position: relative;
      z-index: 1;
    }
    
    .agent-logo {
      font-size: 4rem;
      margin-bottom: 1rem;
      text-shadow: 0 0 20px #00d4ff;
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0%, 100% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.05); opacity: 0.8; }
    }
    
    .agent-title {
      font-size: 3rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
      text-shadow: 0 0 10px #00d4ff;
      background: linear-gradient(45deg, #00d4ff, #ffffff);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .agent-tagline {
      font-size: 1.2rem;
      color: #b3b3b3;
      margin-bottom: 2rem;
      opacity: 0.9;
    }
    
    .agent-description {
      max-width: 600px;
      margin: 0 auto 2rem;
      color: #cccccc;
      line-height: 1.6;
      font-size: 1rem;
    }
    
    .agent-stats {
      display: flex;
      justify-content: center;
      gap: 2rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }
    
    .stat-item {
      background: rgba(0, 212, 255, 0.1);
      border: 1px solid #00d4ff;
      border-radius: 8px;
      padding: 1rem;
      min-width: 120px;
      text-align: center;
    }
    
    .stat-value {
      font-size: 1.5rem;
      font-weight: bold;
      color: #00d4ff;
      display: block;
    }
    
    .stat-label {
      font-size: 0.8rem;
      color: #b3b3b3;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    /* Terminal Section */
    .terminal-section {
      padding: 2rem;
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .terminal-header {
      text-align: center;
      margin-bottom: 2rem;
    }
    
    .terminal-title {
      font-size: 1.5rem;
      color: #00d4ff;
      margin-bottom: 0.5rem;
    }
    
    .terminal-subtitle {
      color: #b3b3b3;
      font-size: 0.9rem;
    }
    
    .terminal-container {
      background: #000000;
      border: 2px solid #00d4ff;
      border-radius: 12px;
      box-shadow: 0 0 30px rgba(0, 212, 255, 0.3);
      overflow: hidden;
      position: relative;
    }
    
    .terminal-titlebar {
      background: linear-gradient(90deg, #00d4ff 0%, #0099cc 100%);
      padding: 0.75rem 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .terminal-button {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: #ff5f56;
    }
    
    .terminal-button.yellow { background: #ffbd2e; }
    .terminal-button.green { background: #27ca3f; }
    
    .terminal-title-text {
      margin-left: 1rem;
      color: #000;
      font-weight: bold;
      font-size: 0.9rem;
    }
    
    .terminal-output {
      height: 400px;
      padding: 1rem;
      overflow-y: auto;
      background: #000000;
      color: #00ff00;
      font-family: 'Consolas', 'Monaco', monospace;
      font-size: 14px;
      line-height: 1.4;
    }
    
    .terminal-output::-webkit-scrollbar {
      width: 8px;
    }
    
    .terminal-output::-webkit-scrollbar-track {
      background: #1a1a1a;
    }
    
    .terminal-output::-webkit-scrollbar-thumb {
      background: #00d4ff;
      border-radius: 4px;
    }
    
    .terminal-output::-webkit-scrollbar-thumb:hover {
      background: #00a8cc;
    }

    /* Sticky Menu Bar */
    .menu-bar {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background: linear-gradient(90deg, #0a0a0a 0%, #1a1a2e 50%, #0a0a0a 100%);
      border-bottom: 2px solid #00d4ff;
      box-shadow: 0 2px 10px rgba(0, 212, 255, 0.3);
      z-index: 1000;
      padding: 0.5rem 1rem;
      font-family: 'Consolas', 'Monaco', monospace;
    }

    .menu-items {
      display: flex;
      gap: 0;
      align-items: center;
    }

    .menu-item {
      position: relative;
      display: inline-block;
    }

    .menu-button {
      background: transparent;
      border: 1px solid transparent;
      color: #00d4ff;
      padding: 0.5rem 1rem;
      cursor: pointer;
      font-family: inherit;
      font-size: 14px;
      transition: all 0.2s ease;
      border-radius: 4px;
    }

    .menu-button:hover {
      background: rgba(0, 212, 255, 0.1);
      border-color: #00d4ff;
      box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
    }

    .menu-button.active {
      background: rgba(0, 212, 255, 0.2);
      border-color: #00d4ff;
    }

    /* Terminal-style Dropdown */
    .dropdown {
      position: absolute;
      top: 100%;
      left: 0;
      background: #000000;
      border: 2px solid #00d4ff;
      border-radius: 8px;
      box-shadow: 0 5px 20px rgba(0, 212, 255, 0.4);
      min-width: 250px;
      max-height: 400px;
      overflow-y: auto;
      opacity: 0;
      visibility: hidden;
      transform: translateY(-10px);
      transition: all 0.3s ease;
      z-index: 1001;
    }

    .dropdown.active {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }

    .dropdown-header {
      background: linear-gradient(90deg, #00d4ff 0%, #0099cc 100%);
      color: #000;
      padding: 0.5rem 1rem;
      font-weight: bold;
      font-size: 12px;
      border-bottom: 1px solid #00d4ff;
    }

    /* Linux Tree Structure */
    .tree-container {
      padding: 0.5rem;
      color: #00ff00;
      font-family: 'Consolas', 'Monaco', monospace;
      font-size: 12px;
      line-height: 1.3;
    }

    .tree-item {
      position: relative;
      padding: 0.2rem 0;
      cursor: pointer;
      transition: background 0.2s ease;
    }

    .tree-item:hover {
      background: rgba(0, 255, 0, 0.1);
    }

    .tree-item.expandable {
      position: relative;
    }

    .tree-item.expandable::before {
      content: "├── ";
      color: #00d4ff;
    }

    .tree-item.last::before {
      content: "└── ";
      color: #00d4ff;
    }

    .tree-item.folder::after {
      content: "/";
      color: #ffff00;
    }

    .tree-item.executable {
      color: #00ff00;
      font-weight: bold;
    }

    .tree-item.config {
      color: #ff9900;
    }

    .tree-item.link {
      color: #ff00ff;
    }

    .tree-children {
      margin-left: 1.5rem;
      border-left: 1px solid #333;
      padding-left: 0.5rem;
      display: none;
    }

    .tree-children.expanded {
      display: block;
    }

    .tree-children .tree-item::before {
      content: "├── ";
      color: #00d4ff;
    }

    .tree-children .tree-item:last-child::before {
      content: "└── ";
      color: #00d4ff;
    }

    /* Sub-menu arrow */
    .has-submenu::after {
      content: " ▶";
      color: #ffff00;
      font-size: 10px;
      margin-left: 0.5rem;
    }

    .tree-item.expanded .has-submenu::after {
      content: " ▼";
    }
    
    .terminal-message {
      margin-bottom: 1rem;
      display: block;
    }
    
    .user-message {
      color: #00d4ff;
    }
    
    .user-message::before {
      content: '$ ';
      color: #00ff00;
      font-weight: bold;
    }
    
    .agent-message {
      color: #ffffff;
      margin-left: 2rem;
      white-space: pre-wrap;
      word-wrap: break-word;
    }
    
    .timestamp {
      color: #666666;
      font-size: 12px;
      margin-left: 1rem;
    }
    
    .terminal-input-container {
      background: #111111;
      border-top: 1px solid #333333;
      padding: 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .terminal-prompt {
      color: #00ff00;
      font-weight: bold;
      flex-shrink: 0;
    }
    
    .terminal-input {
      flex: 1;
      background: transparent;
      border: none;
      color: #00d4ff;
      font-family: inherit;
      font-size: 14px;
      outline: none;
      padding: 0.5rem;
    }
    
    .terminal-input::placeholder {
      color: #666666;
    }
    
    .send-button {
      background: linear-gradient(45deg, #00d4ff, #0099cc);
      border: none;
      border-radius: 6px;
      color: #000;
      padding: 0.5rem 1rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      font-family: inherit;
    }
    
    .send-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0, 212, 255, 0.4);
    }
    
    .send-button:active {
      transform: translateY(0);
    }
    
    .loading {
      opacity: 0.6;
      pointer-events: none;
    }
    
    .typing-indicator {
      color: #00ff00;
      display: none;
    }
    
    .typing-indicator.active {
      display: block;
    }
    
    .typing-indicator::after {
      content: '...';
      animation: typing 1.5s infinite;
    }
    
    @keyframes typing {
      0%, 60% { content: '...'; }
      20% { content: '.'; }
      40% { content: '..'; }
    }
    
    /* Welcome message */
    .welcome-message {
      color: #00ff00;
      margin-bottom: 1rem;
    }
    
    .system-info {
      color: #666666;
      font-size: 12px;
      margin-bottom: 1rem;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .hero-section {
        padding: 2rem 1rem;
      }
      
      .agent-title {
        font-size: 2rem;
      }
      
      .agent-stats {
        gap: 1rem;
      }
      
      .terminal-section {
        padding: 1rem;
      }
      
      .terminal-output {
        height: 300px;
      }
    }
  </style>
</head>

<body>
  <!-- Sticky Menu Bar -->
  <nav class="menu-bar">
    <div class="menu-items">
      <div class="menu-item">
        <button class="menu-button" onclick="toggleDropdown('file-menu')">File</button>
        <div id="file-menu" class="dropdown">
          <div class="dropdown-header">Data Management</div>
          <div class="tree-container">
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              datasets
              <div class="tree-children">
                <div class="tree-item executable" onclick="loadDataset()">load_dataset.py</div>
                <div class="tree-item config" onclick="previewData()">data_preview.csv</div>
                <div class="tree-item config" onclick="exportResults()">export_results.json</div>
                <div class="tree-item last executable" onclick="cleanData()">data_cleaning.py</div>
              </div>
            </div>
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              models
              <div class="tree-children">
                <div class="tree-item config" onclick="loadModel()">trained_model.pkl</div>
                <div class="tree-item config" onclick="modelMetrics()">model_metrics.json</div>
                <div class="tree-item last config" onclick="saveModel()">save_model.py</div>
              </div>
            </div>
            <div class="tree-item last executable" onclick="exitDatasphere()">shutdown.sh</div>
          </div>
        </div>
      </div>

      <div class="menu-item">
        <button class="menu-button" onclick="toggleDropdown('features-menu')">Features</button>
        <div id="features-menu" class="dropdown">
          <div class="dropdown-header">Data Science Tools</div>
          <div class="tree-container">
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              machine_learning
              <div class="tree-children">
                <div class="tree-item executable" onclick="setMode('regression')">regression_analysis.py</div>
                <div class="tree-item executable" onclick="setMode('classification')">classification.py</div>
                <div class="tree-item executable" onclick="setMode('clustering')">clustering.py</div>
                <div class="tree-item last executable" onclick="setMode('neural_networks')">neural_networks.py</div>
              </div>
            </div>
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              statistics
              <div class="tree-children">
                <div class="tree-item executable" onclick="runStatisticalTest()">hypothesis_testing.R</div>
                <div class="tree-item executable" onclick="runCorrelation()">correlation_analysis.py</div>
                <div class="tree-item executable" onclick="runRegression()">regression_modeling.py</div>
                <div class="tree-item last config" onclick="generateReport()">statistical_report.html</div>
              </div>
            </div>
            <div class="tree-item last folder has-submenu" onclick="toggleSubmenu(this)">
              visualization
              <div class="tree-children">
                <div class="tree-item executable" onclick="createVisualization()">plot_generator.py</div>
                <div class="tree-item executable" onclick="createDashboard()">dashboard.py</div>
                <div class="tree-item last link" onclick="openNotebook()">jupyter_notebook.ipynb</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="menu-item">
        <button class="menu-button" onclick="toggleDropdown('agents-menu')">Agents</button>
        <div id="agents-menu" class="dropdown">
          <div class="dropdown-header">Analytics Network</div>
          <div class="tree-container">
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              active_models
              <div class="tree-children">
                <div class="tree-item executable config">datasphere.service ● running</div>
                <div class="tree-item last link" onclick="switchModel('predictive')">predictive_engine.model → /models/</div>
              </div>
            </div>
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              algorithms
              <div class="tree-children">
                <div class="tree-item executable" onclick="loadAlgorithm('random_forest')">random_forest.py</div>
                <div class="tree-item executable" onclick="loadAlgorithm('gradient_boost')">gradient_boosting.py</div>
                <div class="tree-item executable" onclick="loadAlgorithm('neural_net')">neural_network.py</div>
                <div class="tree-item last config" onclick="createCustomModel()">custom_model.template</div>
              </div>
            </div>
            <div class="tree-item last folder has-submenu" onclick="toggleSubmenu(this)">
              data_sources
              <div class="tree-children">
                <div class="tree-item config">database.onelastai.com</div>
                <div class="tree-item config">analytics.status</div>
                <div class="tree-item last link">api.datasphere → https://api.datasphere.com/</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="menu-item">
        <button class="menu-button" onclick="toggleDropdown('help-menu')">Help</button>
        <div id="help-menu" class="dropdown">
          <div class="dropdown-header">DataSphere Documentation</div>
          <div class="tree-container">
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              guides
              <div class="tree-children">
                <div class="tree-item config" onclick="showDocs('data-science-basics')">data_science_basics.md</div>
                <div class="tree-item config" onclick="showDocs('ml-algorithms')">ml_algorithms.txt</div>
                <div class="tree-item config" onclick="showDocs('statistical-tests')">statistical_methods.html</div>
                <div class="tree-item last config" onclick="showDocs('visualization')">visualization_guide.json</div>
              </div>
            </div>
            <div class="tree-item expandable folder has-submenu" onclick="toggleSubmenu(this)">
              community
              <div class="tree-children">
                <div class="tree-item link" onclick="openDataScience()">github.com/datasphere/community</div>
                <div class="tree-item link" onclick="openKaggle()">kaggle.com/datasphere</div>
                <div class="tree-item last config" onclick="reportDataIssue()">data_issue_report.template</div>
              </div>
            </div>
            <div class="tree-item last executable" onclick="showDataSphereAbout()">about_datasphere.sh</div>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <!-- Hero Section -->
  <section class="hero-section">
    <div class="hero-content">
      <div class="agent-logo">📊</div>
      <h1 class="agent-title">DataSphere</h1>
      <p class="agent-tagline">Advanced Data Science & Machine Learning Intelligence</p>
      <p class="agent-description">
        I am DataSphere, your advanced data science and machine learning specialist. 
        I transform raw data into actionable insights through statistical analysis, predictive modeling, 
        and cutting-edge AI algorithms. Let's unlock the hidden patterns in your data together.
      </p>
      
      <div class="agent-stats">
        <div class="stat-item">
          <span class="stat-value"><%= @agent_stats[:total_conversations] %></span>
          <span class="stat-label">Data Analyses</span>
        </div>
        <div class="stat-item">
          <span class="stat-value"><%= @agent_stats[:average_rating] %></span>
          <span class="stat-label">ML Accuracy</span>
        </div>
        <div class="stat-item">
          <span class="stat-value"><%= @agent_stats[:response_time] %></span>
          <span class="stat-label">Processing Speed</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">97.3%</span>
          <span class="stat-label">Model Precision</span>
        </div>
      </div>
    </div>
  </section>

  <!-- Terminal Section -->
  <section class="terminal-section">
    <div class="terminal-header">
      <h2 class="terminal-title">� DataSphere Analytics Terminal</h2>
      <p class="terminal-subtitle">Advanced data science and machine learning interface - Type your data queries below</p>
    </div>
    
    <div class="terminal-container">
      <div class="terminal-titlebar">
        <div class="terminal-button"></div>
        <div class="terminal-button yellow"></div>
        <div class="terminal-button green"></div>
        <span class="terminal-title-text">datasphere@analytics.onelastai.com:~$</span>
      </div>
      
      <div class="terminal-output" id="terminal-output">
        <div class="welcome-message">
╔══════════════════════════════════════════════════════════════════╗
║                    Welcome to DataSphere                         ║
║           Advanced Data Science & ML Platform                    ║
╚══════════════════════════════════════════════════════════════════╝

<div class="system-info">System: DataSphere v2.1 | Status: Online | Agent ID: <%= @agent.id %>
<%= Time.current.strftime("Date: %Y-%m-%d %H:%M:%S") %> | ML Models: Active | GPU: Available</div>

<span style="color: #00d4ff;">Welcome! I'm DataSphere, your advanced data science specialist.</span>

I can help you with:
• 📊 Statistical analysis & hypothesis testing
• 🤖 Machine learning model development
• 📈 Data visualization & dashboard creation
• 🔍 Pattern recognition & anomaly detection
• 📉 Predictive modeling & forecasting
• 🧠 Deep learning & neural networks
• 📋 Data preprocessing & feature engineering
• ⚡ Real-time analytics & streaming data

Ready to transform your data into insights? Let's begin!

        </div>
        
        <div class="typing-indicator" id="typing-indicator">
          NeoChat is thinking
        </div>
      </div>
      
      <div class="terminal-input-container">
        <span class="terminal-prompt">datasphere@analytics:~$ </span>
        <input 
          type="text" 
          class="terminal-input" 
          id="user-input"
          placeholder="Describe your data analysis needs, upload dataset, or ask about ML algorithms..."
          autocomplete="off"
        >
        <button class="send-button" id="send-button">Send</button>
      </div>
    </div>
  </section>

  <script>
    // Menu System Functions
    function toggleDropdown(menuId) {
      // Close all other dropdowns first
      const allDropdowns = document.querySelectorAll('.dropdown');
      allDropdowns.forEach(dropdown => {
        if (dropdown.id !== menuId) {
          dropdown.classList.remove('active');
        }
      });
      
      // Toggle the target dropdown
      const dropdown = document.getElementById(menuId);
      dropdown.classList.toggle('active');
      
      // Toggle active state on menu button
      const button = dropdown.previousElementSibling;
      button.classList.toggle('active');
    }

    function toggleSubmenu(element) {
      const children = element.querySelector('.tree-children');
      if (children) {
        children.classList.toggle('expanded');
        element.classList.toggle('expanded');
      }
    }

    // Close dropdowns when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.menu-item')) {
        const allDropdowns = document.querySelectorAll('.dropdown');
        const allButtons = document.querySelectorAll('.menu-button');
        
        allDropdowns.forEach(dropdown => {
          dropdown.classList.remove('active');
        });
        
        allButtons.forEach(button => {
          button.classList.remove('active');
        });
      }
    });

    // DataSphere-specific menu functions
    function loadDataset() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ python load_dataset.py\nLoading dataset from data source...\nDataset loaded: 50,000 rows, 25 features\nData types: 15 numerical, 10 categorical\nReady for analysis!');
      }
    }

    function previewData() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ head -10 data_preview.csv\nDisplaying first 10 rows:\n   ID  Feature1  Feature2  Target\n    1     12.5      8.3     1.2\n    2      9.1      7.8     0.9\n... [Preview generated]');
      }
    }

    function cleanData() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ python data_cleaning.py\nChecking for missing values...\nHandling outliers...\nData cleaning completed: 98.5% data quality score');
      }
    }

    function loadModel() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ import pickle; model = pickle.load(open("trained_model.pkl", "rb"))\nModel loaded successfully!\nAlgorithm: Random Forest\nAccuracy: 94.2%\nReady for predictions!');
      }
    }

    function runStatisticalTest() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ Rscript hypothesis_testing.R\nRunning statistical analysis...\nt-test: p-value = 0.001 (significant)\nChi-square: p-value = 0.023 (significant)\nAnalysis complete!');
      }
    }

    function createVisualization() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ python plot_generator.py\nGenerating data visualizations...\n✓ Scatter plot created\n✓ Histogram generated\n✓ Correlation heatmap ready\nPlots saved to /output/visualizations/');
      }
    }

    function clearHistory() {
      if (window.terminal && confirm('Clear all conversation history? This cannot be undone.')) {
        window.terminal.output.innerHTML = '';
        window.terminal.addMessage('system', '$ ./clear.sh\nClearing conversation history...\nHistory cleared successfully!');
      }
    }

    function openSettings() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ nano config.yml\nOpening NeoChat configuration...\n[Settings panel coming soon]');
      }
    }

    function openPreferences() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ vim preferences.ini\nOpening user preferences...\n[Preferences panel coming soon]');
      }
    }

    function openThemes() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ ls /usr/share/themes/\nAvailable themes:\n├── matrix-green\n├── cyber-blue\n├── neon-purple\n└── classic-amber\n[Theme switching coming soon]');
      }
    }

    function exitChat() {
      if (confirm('Exit NeoChat? Any unsaved conversation will be lost.')) {
        window.location.href = '/';
      }
    }

    function setMode(mode) {
      if (window.terminal) {
        const modeMessages = {
          question: '$ python3 question_answering.py\nActivating Q&A mode...\nReady to answer your questions!',
          creative: '$ python3 creative_writing.py\nActivating creative mode...\nReady for creative tasks and brainstorming!',
          problem: '$ python3 problem_solving.py\nActivating problem-solving mode...\nReady to tackle complex problems!',
          analysis: '$ python3 data_analysis.py\nActivating analysis mode...\nReady for data analysis and insights!'
        };
        
        window.terminal.addMessage('system', modeMessages[mode] || 'Mode activated');
      }
    }

    function switchAgent(agentType) {
      if (confirm(`Switch to ${agentType} agent? This will redirect to a new agent session.`)) {
        // This would redirect to the appropriate agent subdomain/path
        window.terminal.addMessage('system', `$ systemctl switch-agent ${agentType}\nSwitching to ${agentType} agent...\n[Agent switching coming soon]`);
      }
    }

    function createAgent() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ cp custom.template my_agent.py\nCreating custom agent...\n[Custom agent creation coming soon]');
      }
    }

    function showDocs(docType) {
      if (window.terminal) {
        const docs = {
          'data-science-basics': 'Welcome to DataSphere Data Science!\n\nCore Concepts:\n- Statistical inference and hypothesis testing\n- Machine learning fundamentals\n- Data preprocessing and feature engineering\n- Model evaluation and validation\n',
          'ml-algorithms': 'Available ML Algorithms:\n- Supervised: Random Forest, SVM, Neural Networks\n- Unsupervised: K-means, DBSCAN, PCA\n- Ensemble: Gradient Boosting, AdaBoost\n- Deep Learning: CNN, RNN, Transformers\n',
          'statistical-tests': 'Statistical Methods:\n- t-tests and ANOVA for group comparisons\n- Chi-square tests for categorical data\n- Correlation and regression analysis\n- Time series analysis and forecasting\n',
          'visualization': 'Visualization Tools:\n- Matplotlib and Seaborn for static plots\n- Plotly for interactive visualizations\n- Dashboard creation with Streamlit\n- Real-time data monitoring\n'
        };
        
        window.terminal.addMessage('system', `$ cat ${docType}.md\n${docs[docType] || 'Documentation not found'}`);
      }
    }

    function openSupport() {
      window.open('https://github.com/onelastai/neochat', '_blank');
    }

    function openDiscord() {
      window.open('https://discord.gg/onelastai', '_blank');
    }

    function reportBug() {
      if (window.terminal) {
        window.terminal.addMessage('system', '$ nano bug_report.template\nOpening bug report template...\n[Bug reporting system coming soon]');
      }
    }

    function showDataSphereAbout() {
      if (window.terminal) {
        window.terminal.addMessage('system', `$ ./about_datasphere.sh
╔══════════════════════════════════════╗
║           DataSphere v2.1            ║
║                                      ║
║   Advanced Data Science Platform     ║
║     Built by onelastai.com          ║
║                                      ║
║  • Machine Learning Algorithms       ║
║  • Statistical Analysis Tools        ║
║  • Data Visualization Engine         ║
║  • Predictive Modeling Suite         ║
║  • Real-time Analytics              ║
║  • GPU-Accelerated Processing       ║
║                                      ║
║  Models Trained: 1,247+             ║
║  Accuracy Rate: 97.3%               ║
║  Processing Speed: < 1.2s           ║
║                                      ║
║  © 2025 DataSphere Analytics        ║
╚══════════════════════════════════════╝`);
      }
    }

    function setMode(mode) {
      if (window.terminal) {
        const modeMessages = {
          regression: '$ python regression_analysis.py\nActivating regression modeling...\nLinear, polynomial, and logistic regression ready!\nFeature selection: enabled | Cross-validation: active',
          classification: '$ python classification.py\nActivating classification algorithms...\nRandom Forest, SVM, and Neural Networks loaded!\nAccuracy optimization: enabled',
          clustering: '$ python clustering.py\nActivating unsupervised learning...\nK-means, DBSCAN, and hierarchical clustering ready!\nOptimal cluster detection: active',
          neural_networks: '$ python neural_networks.py\nActivating deep learning...\nTensorFlow and PyTorch frameworks loaded!\nGPU acceleration: enabled'
        };
        
        window.terminal.addMessage('system', modeMessages[mode] || 'DataSphere mode activated');
      }
    }

    function loadAlgorithm(algorithm) {
      const algorithms = {
        random_forest: '$ python random_forest.py\nLoading Random Forest algorithm...\n✓ Ensemble method ready\n✓ Feature importance enabled\n✓ Out-of-bag error: 0.023',
        gradient_boost: '$ python gradient_boosting.py\nLoading Gradient Boosting...\n✓ XGBoost framework active\n✓ Learning rate: optimized\n✓ Early stopping: enabled',
        neural_net: '$ python neural_network.py\nLoading Neural Network...\n✓ Deep learning architecture ready\n✓ Backpropagation: active\n✓ GPU acceleration: enabled'
      };
      
      if (window.terminal && algorithms[algorithm]) {
        window.terminal.addMessage('system', algorithms[algorithm]);
      }
    }

    function exitDatasphere() {
      if (confirm('Exit DataSphere? Any unsaved models will be lost.')) {
        window.location.href = '/';
      }
    }

    // Terminal Chat Functionality
    class NeoChatTerminal {
      constructor() {
        this.output = document.getElementById('terminal-output');
        this.input = document.getElementById('user-input');
        this.sendButton = document.getElementById('send-button');
        this.typingIndicator = document.getElementById('typing-indicator');
        
        this.setupEventListeners();
        this.focusInput();
      }
      
      setupEventListeners() {
        this.input.addEventListener('keypress', (e) => {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            this.sendMessage();
          }
        });
        
        this.sendButton.addEventListener('click', () => {
          this.sendMessage();
        });
        
        // Auto-focus input when clicking anywhere on terminal
        this.output.addEventListener('click', () => {
          this.input.focus();
        });
      }
      
      focusInput() {
        this.input.focus();
      }
      
      async sendMessage() {
        const message = this.input.value.trim();
        if (!message) return;
        
        // Display user message
        this.addMessage('user', message);
        this.input.value = '';
        
        // Show loading state
        this.setLoading(true);
        this.showTyping(true);
        
        try {
          const response = await fetch('/chat', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({ message: message })
          });
          
          const data = await response.json();
          
          if (data.success) {
            this.addMessage('agent', data.response, data.timestamp);
          } else {
            this.addMessage('error', data.error || 'Sorry, there was an error processing your message.');
          }
        } catch (error) {
          console.error('Chat error:', error);
          this.addMessage('error', 'Connection error. Please check your internet and try again.');
        } finally {
          this.setLoading(false);
          this.showTyping(false);
          this.focusInput();
        }
      }
      
      addMessage(type, content, timestamp = null) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'terminal-message';
        
        const time = timestamp || new Date().toLocaleTimeString();
        
        if (type === 'user') {
          messageDiv.innerHTML = `<span class="user-message">${this.escapeHtml(content)}</span><span class="timestamp">[${time}]</span>`;
        } else if (type === 'agent') {
          messageDiv.innerHTML = `<div class="agent-message">${this.escapeHtml(content)}</div><span class="timestamp">[${time}]</span>`;
        } else if (type === 'error') {
          messageDiv.innerHTML = `<div class="agent-message" style="color: #ff6b6b;">❌ ${this.escapeHtml(content)}</div>`;
        }
        
        this.output.appendChild(messageDiv);
        this.scrollToBottom();
      }
      
      setLoading(isLoading) {
        this.sendButton.disabled = isLoading;
        this.input.disabled = isLoading;
        
        if (isLoading) {
          this.sendButton.textContent = 'Sending...';
          this.sendButton.classList.add('loading');
        } else {
          this.sendButton.textContent = 'Send';
          this.sendButton.classList.remove('loading');
        }
      }
      
      showTyping(show) {
        if (show) {
          this.typingIndicator.classList.add('active');
          this.scrollToBottom();
        } else {
          this.typingIndicator.classList.remove('active');
        }
      }
      
      scrollToBottom() {
        this.output.scrollTop = this.output.scrollHeight;
      }
      
      escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      }
    }
    
    // Initialize terminal when page loads
    document.addEventListener('DOMContentLoaded', () => {
      window.terminal = new NeoChatTerminal();
    });
  </script>
</body>
</html>
